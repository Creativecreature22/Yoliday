{
	"info": {
		"_postman_id": "a5f44dc1-ed94-4881-a19b-b5666d8eaaf1",
		"name": "Yoliday",
		"description": "#### Collections Of API to Perform CRUD operation on User, Product and Orders\n\nWith 3 Folder For each Sections To validate Reponse time, Status code, Header, Schema, etc.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26803658"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Get_All_users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response_Time_to_be_below_350ms\" ,()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(350);\r",
									"});\r",
									"pm.test(\"Status_Code_200\", ()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Validate Content-Type header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Cache-Control header\", function () {\r",
									"    pm.response.to.have.header(\"Cache-Control\");\r",
									"    const headerValue = pm.response.headers.get(\"Cache-Control\");\r",
									"    pm.expect(headerValue).to.eql(\"public, max-age=0, must-revalidate\");\r",
									"});\r",
									"\r",
									"\r",
									"//Schema to validate\r",
									"const schema = {\r",
									"    type: \"object\",\r",
									"    required: [\"id\", \"name\", \"email\", \"age\"],\r",
									"    properties: {\r",
									"        id: { type: \"number\" },\r",
									"            name: { type: \"string\" },\r",
									"            email: { type: \"string\", format: \"email\" },\r",
									"            age: { type: \"number\" }\r",
									"        } };\r",
									"   \r",
									"\r",
									"    // \r",
									"    const Ajv = require('ajv');\r",
									"    const ajv = new Ajv();\r",
									"    const validate = ajv.compile(schema);\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    const valid = validate(jsonData);\r",
									"    // function to validate.\r",
									"    pm.test(\"Validate response schema with Ajv\", function () {\r",
									"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
									"    });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/users",
							"host": [
								"{{Path}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get_Specific_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response_Time_below_300\" ,()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"Status_Code_200\", ()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Validate Content-Type header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Cache-Control header\", function () {\r",
									"    pm.response.to.have.header(\"Cache-Control\");\r",
									"    const headerValue = pm.response.headers.get(\"Cache-Control\");\r",
									"    pm.expect(headerValue).to.eql(\"public, max-age=0, must-revalidate\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/users/1",
							"host": [
								"{{Path}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get_Specific_non_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response_Time_below_300\" ,()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"Status_Code_404\", ()=>{\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Validate Content-Type header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Cache-Control header\", function () {\r",
									"    pm.response.to.have.header(\"Cache-Control\");\r",
									"    const headerValue = pm.response.headers.get(\"Cache-Control\");\r",
									"    pm.expect(headerValue).to.eql(\"public, max-age=0, must-revalidate\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/users/61",
							"host": [
								"{{Path}}"
							],
							"path": [
								"users",
								"61"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add_New_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User_Post_Response_time_to_be_below_300\",()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"User_Post_Status_201\",()=>{\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Validate Content-Type header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Cache-Control header\", function () {\r",
									"    pm.response.to.have.header(\"Cache-Control\");\r",
									"    const headerValue = pm.response.headers.get(\"Cache-Control\");\r",
									"    pm.expect(headerValue).to.eql(\"public, max-age=0, must-revalidate\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":8,\r\n    \"name\":\"anand\",\r\n    \"email\":\"anand098@gmail.com\",\r\n    \"age\":28\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/users",
							"host": [
								"{{Path}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add_New_user_Invalid_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User_Post_Response_time_to_be_below_300\",()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(311);\r",
									"});\r",
									"pm.test(\"User_Post_400_Status\",()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"    // Error!! Name with number 00 get created and with multiple 0000 response body is not returned.\r",
									"});\r",
									"let resp=pm.response.json(); // Get response body as text\r",
									"let error=resp.error;\r",
									"let message=\"Invalid name format or length\"; // Expected error message\r",
									"\r",
									"pm.test(\"Invalid name\", () => {\r",
									"    pm.expect(error).to.eql(message);});\r",
									"// Header Validation.\r",
									"pm.test(\"Validate Content-Type header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Cache-Control header\", function () {\r",
									"    pm.response.to.have.header(\"Cache-Control\");\r",
									"    const headerValue = pm.response.headers.get(\"Cache-Control\");\r",
									"    pm.expect(headerValue).to.eql(\"public, max-age=0, must-revalidate\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":9,\r\n    \"name\":8989,\r\n    \"email\":\"mike098@gmail.comm\",\r\n    \"age\":100\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/users",
							"host": [
								"{{Path}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add_New_user_Invalid_e-mail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User_Post_Response_time\",()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(311);\r",
									"});\r",
									"pm.test(\"User_Invalid-Email_400_Status\",()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"let resp=pm.response.json(); // Changed json() to text()\r",
									"let message=\"Invalid email format or length\"; // Assigned expected error message directly\r",
									"let expectedMessage = resp.error; // Extracted error message from response body\r",
									"\r",
									"pm.test(\"Invalid name\", () => {\r",
									"    pm.expect(message).to.eql(expectedMessage); // Updated assertion to compare response text with expected message\r",
									"});\r",
									"// Header Validation.\r",
									"pm.test(\"Validate Content-Type header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Cache-Control header\", function () {\r",
									"    pm.response.to.have.header(\"Cache-Control\");\r",
									"    const headerValue = pm.response.headers.get(\"Cache-Control\");\r",
									"    pm.expect(headerValue).to.eql(\"public, max-age=0, must-revalidate\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":9,\r\n    \"name\":\"mike\",\r\n    \"email\":\"mikeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee098@gmail.com\",\r\n    \"age\":101\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/users",
							"host": [
								"{{Path}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add_New_user_Invalid_Age",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User_Post_Response_time\",()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(311);\r",
									"});\r",
									"pm.test(\"User_Invalid_Age_400_Status\",()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"let resp=pm.response.json(); // Get response body as text\r",
									"let error=resp.error;\r",
									"let message=\"Invalid age value\"; // Expected error message\r",
									"\r",
									"pm.test(\"Invalid name\", () => {\r",
									"    pm.expect(error).to.eql(message); \r",
									"});// Header Validation.\r",
									"pm.test(\"Validate Content-Type header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Cache-Control header\", function () {\r",
									"    pm.response.to.have.header(\"Cache-Control\");\r",
									"    const headerValue = pm.response.headers.get(\"Cache-Control\");\r",
									"    pm.expect(headerValue).to.eql(\"public, max-age=0, must-revalidate\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":9,\r\n    \"name\":\"mike\",\r\n    \"email\":\"mike098@gmail.com\",\r\n    \"age\":101\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/users",
							"host": [
								"{{Path}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add_New_Existing_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User_Post_Response_time\",()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"User_Post_Conflict _409_Status\",()=>{\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"let resp=pm.response.json(); // Get response body as text\r",
									"let error=resp.error;\r",
									"let message=\"Email address already exists\"; // Expected error message\r",
									"\r",
									"pm.test(\"Invalid name\", () => {\r",
									"    pm.expect(error).to.eql(message); \r",
									"});\r",
									"// Header Validation.\r",
									"pm.test(\"Validate Content-Type header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Cache-Control header\", function () {\r",
									"    pm.response.to.have.header(\"Cache-Control\");\r",
									"    const headerValue = pm.response.headers.get(\"Cache-Control\");\r",
									"    pm.expect(headerValue).to.eql(\"public, max-age=0, must-revalidate\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":8,\r\n    \"name\":\"anand\",\r\n    \"email\":\"anand098@gmail.com\",\r\n    \"age\":28\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/users",
							"host": [
								"{{Path}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update_existing_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User_Post_Response_time_is 800\",()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"pm.test(\"User_Post_Status_200\",()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Header Validation.\r",
									"pm.test(\"Validate Content-Type header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Cache-Control header\", function () {\r",
									"    pm.response.to.have.header(\"Cache-Control\");\r",
									"    const headerValue = pm.response.headers.get(\"Cache-Control\");\r",
									"    pm.expect(headerValue).to.eql(\"public, max-age=0, must-revalidate\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Jessica Martinez\",\r\n    \"email\": \"jessica.martinez@example.com\",\r\n    \"age\":24\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/users/5",
							"host": [
								"{{Path}}"
							],
							"path": [
								"users",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "update_user_with_same email id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User_Post_Response_time_is 800\",()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"pm.test(\"E-mail_id already Exists\",()=>{\r",
									"    pm.response.to.have.status(409);\r",
									"    console.log(\"E-mail already registered :\");\r",
									"});\r",
									"let resp=pm.response.json(); // Get response body as text\r",
									"let error=resp.error;\r",
									"let message=\"Email address already exists\"; // Expected error message\r",
									"\r",
									"pm.test(\"Invalid name\", () => {\r",
									"    pm.expect(error).to.eql(message);});\r",
									"// Header Validation.\r",
									"pm.test(\"Validate Content-Type header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Cache-Control header\", function () {\r",
									"    pm.response.to.have.header(\"Cache-Control\");\r",
									"    const headerValue = pm.response.headers.get(\"Cache-Control\");\r",
									"    pm.expect(headerValue).to.eql(\"public, max-age=0, must-revalidate\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"David Thompson\",\r\n    \"email\": \"jessica.martinez@example.com\",\r\n    \"age\": 35\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/users/4",
							"host": [
								"{{Path}}"
							],
							"path": [
								"users",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Updating_Non-existing_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User_Post_Response_time_is_Below 800\",()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"pm.test(\"User_Not_found_404\",()=>{\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"let resp=pm.response.json(); // Get response body as text\r",
									"let error=resp.error;\r",
									"let message=\"User not found\"; // Expected error message\r",
									"\r",
									"pm.test(\"Invalid name\", () => {\r",
									"    pm.expect(error).to.eql(message);});\r",
									"    // Header Validation.\r",
									"pm.test(\"Validate Content-Type header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Cache-Control header\", function () {\r",
									"    pm.response.to.have.header(\"Cache-Control\");\r",
									"    const headerValue = pm.response.headers.get(\"Cache-Control\");\r",
									"    pm.expect(headerValue).to.eql(\"public, max-age=0, must-revalidate\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Jessica Martinez\",\r\n    \"email\": \"jessica.martinez@example.com\",\r\n    \"age\":24\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/users/61",
							"host": [
								"{{Path}}"
							],
							"path": [
								"users",
								"61"
							]
						}
					},
					"response": []
				},
				{
					"name": "Updating_with_invalid_age",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User_Post_Response_time\",()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"pm.test(\"User_Invalid_age_Status_400\",()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let resp=pm.response.json(); // Get response body as text\r",
									"let error=resp.error;\r",
									"let message=\"Invalid age value\"; // Expected error message\r",
									"\r",
									"pm.test(\"Invalid name\", () => {\r",
									"    pm.expect(error).to.eql(message);});\r",
									"\r",
									"    // Header Validation.\r",
									"pm.test(\"Validate Content-Type header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Cache-Control header\", function () {\r",
									"    pm.response.to.have.header(\"Cache-Control\");\r",
									"    const headerValue = pm.response.headers.get(\"Cache-Control\");\r",
									"    pm.expect(headerValue).to.eql(\"public, max-age=0, must-revalidate\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Jessica Martinez\",\r\n    \"email\": \"jessica.martinez@example.com\",\r\n    \"age\":101\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/users/5",
							"host": [
								"{{Path}}"
							],
							"path": [
								"users",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Updating_with_invalid_E-mail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User_Post_Response_time\",()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"pm.test(\"User_Invalid_E-mail_Status_400\",()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let resp=pm.response.json(); // Get response body as text\r",
									"let error=resp.error;\r",
									"let message=\"Invalid email format or length\"; // Expected error message\r",
									"\r",
									"pm.test(\"Invalid name\", () => {\r",
									"    pm.expect(error).to.eql(message);});\r",
									"\r",
									"    // Header Validation.\r",
									"pm.test(\"Validate Content-Type header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Cache-Control header\", function () {\r",
									"    pm.response.to.have.header(\"Cache-Control\");\r",
									"    const headerValue = pm.response.headers.get(\"Cache-Control\");\r",
									"    pm.expect(headerValue).to.eql(\"public, max-age=0, must-revalidate\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Jessica Martinez\",\r\n    \"email\": \"jessica.martinez&example.com\",\r\n    \"age\":24\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/users/5",
							"host": [
								"{{Path}}"
							],
							"path": [
								"users",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Updating_with_invalid_Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User_Post_Response_time\",()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"pm.test(\"User_Invlaid_name_Status_400\",()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let resp=pm.response.json(); // Get response body as text\r",
									"let error=resp.error;\r",
									"let message=\"Invalid name format or length\"; // Expected error message\r",
									"\r",
									"pm.test(\"Invalid name\", () => {\r",
									"    pm.expect(error).to.eql(message);});\r",
									"\r",
									"    // Header Validation.\r",
									"pm.test(\"Validate Content-Type header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Cache-Control header\", function () {\r",
									"    pm.response.to.have.header(\"Cache-Control\");\r",
									"    const headerValue = pm.response.headers.get(\"Cache-Control\");\r",
									"    pm.expect(headerValue).to.eql(\"public, max-age=0, must-revalidate\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":898989,\r\n    \"email\": \"jessica.martinez@example.com\",\r\n    \"age\":24\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/users/5",
							"host": [
								"{{Path}}"
							],
							"path": [
								"users",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete_a_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User_Post_Response_time\",()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"User_Deletion_Status_200\",()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{Path}}/users/6",
							"host": [
								"{{Path}}"
							],
							"path": [
								"users",
								"6"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete_a_user_with_Existing_order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User_Post_Response_time_below_800\",()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"pm.test(\"User_With_existing_order_Status_400\",()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let resp=pm.response.json(); // Get response body as text\r",
									"let error=resp.error;\r",
									"let message=\"Cannot delete user with existing orders\"; // Expected error message\r",
									"\r",
									"pm.test(\"Invalid name\", () => {\r",
									"    pm.expect(error).to.eql(message);});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/users/1",
							"host": [
								"{{Path}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete_a_Non_existing_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User_Post_Response_time_below 800\",()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"pm.test(\"User_did_Not_exist_Status_404\",()=>{\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"let resp=pm.response.json(); // Get response body as text\r",
									"let error=resp.error;\r",
									"let message=\"User not found\"; // Expected error message\r",
									"\r",
									"pm.test(\"Invalid name\", () => {\r",
									"    pm.expect(error).to.eql(message);});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/users/62",
							"host": [
								"{{Path}}"
							],
							"path": [
								"users",
								"62"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "products",
			"item": [
				{
					"name": "Get_All_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response_Time_to_be_below_800\" ,()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"pm.test(\"_Get_Products_Status_Code_200\", ()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"    // Header Validation.\r",
									"pm.test(\"Validate Content-Type header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Cache-Control header\", function () {\r",
									"    pm.response.to.have.header(\"Cache-Control\");\r",
									"    const headerValue = pm.response.headers.get(\"Cache-Control\");\r",
									"    pm.expect(headerValue).to.eql(\"public, max-age=0, must-revalidate\");\r",
									"});\r",
									"const schema={\r",
									"    \"type\":\"object\",\r",
									"    \"required\":[\"id\",\"name\",\"description\",\"price\"],\r",
									"    \"properties\":{\r",
									"        \"id\":{\"type\":\"integer\"},\r",
									"        \"name\":{\"type\":\"string\"},\r",
									"        \"description\":{\"type\":\"string\"},\r",
									"        \"price\":{\"type\":\"number\"}\r",
									"    }\r",
									"};\r",
									"pm.collectionVariables.set(\"Prod_schema\",JSON.stringify(schema));\r",
									"// Setting up the collection variable for schema validation.\r",
									"\r",
									"let resp=pm.response.json();// Response body object\r",
									"\r",
									"const Ajv=require('ajv');\r",
									"const ajv=new Ajv();\r",
									"const validate=ajv.compile(schema);\r",
									"const valid=validate(resp);\r",
									"\r",
									"pm.test(\"Schema is Valid\",()=>{\r",
									"    pm.expect(valid).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Path}}/products",
							"host": [
								"{{Path}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get_specific_User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response_Time_below 800ms\" ,()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"pm.test(\"Status_Code_200\", ()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"const Product_schema=JSON.parse(pm.collectionVariables.get(\"Prod_schema\"));// Calling the schema in coll variable \r",
									"let resp=pm.response.json();// Response body object\r",
									"\r",
									"const Ajv=require('ajv');\r",
									"const ajv=new Ajv();\r",
									"const validate=ajv.compile(Product_schema);\r",
									"const valid=validate(resp);\r",
									"\r",
									"pm.test(\"Schema is Valid\",()=>{\r",
									"    pm.expect(valid).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Path}}/products/4",
							"host": [
								"{{Path}}"
							],
							"path": [
								"products",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get_non-existing_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response_Time_below 800ms\" ,()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"pm.test(\"Product_notfound_Status_Code_404\", ()=>{\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"let resp=pm.response.json();// Response body object\r",
									"const msg = resp.error;//Storing error message from response body.\r",
									"pm.test(\"Product not found\", () => {\r",
									"    pm.expect(msg).to.eql(\"Product not found\"); // Check if response body contains \"Product not found\" message.\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Path}}/products/6",
							"host": [
								"{{Path}}"
							],
							"path": [
								"products",
								"6"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating_Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response_Time_below 800ms\" ,()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"pm.test(\"Product_Created_Status_Code_201\", ()=>{\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"    // Header Validation.\r",
									"pm.test(\"Validate Content-Type header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Cache-Control header\", function () {\r",
									"    pm.response.to.have.header(\"Cache-Control\");\r",
									"    const headerValue = pm.response.headers.get(\"Cache-Control\");\r",
									"    pm.expect(headerValue).to.eql(\"public, max-age=0, must-revalidate\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n    {\r\n        \"id\":7,\r\n        \"name\": \"Wireless Charger\",\r\n        \"description\": \"Fast wireless charger compatible with multiple devices.\",\r\n        \"price\": 29.99\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/products",
							"host": [
								"{{Path}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating_Product_with_Invalid_price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response_Time_below 800ms\" ,()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"pm.test(\"Product_Invalid_Status_Code_400\", ()=>{\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"let resp=pm.response.json();// Response body object\r",
									"const msg = resp.error;//Storing error message from response body.\r",
									"pm.test(\"Invalid price value\", () => {\r",
									"    pm.expect(msg).to.eql(\"Invalid price value\"); // Check if response body contains \"Invalid price value\" message.\r",
									"});\r",
									"    // Header Validation.\r",
									"pm.test(\"Validate Content-Type header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Cache-Control header\", function () {\r",
									"    pm.response.to.have.header(\"Cache-Control\");\r",
									"    const headerValue = pm.response.headers.get(\"Cache-Control\");\r",
									"    pm.expect(headerValue).to.eql(\"public, max-age=0, must-revalidate\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":6,\r\n    \"name\":\"Iphone 15\",\r\n    \"description\":\"Nice phone\",\r\n    \"price\":\"160000.00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/products",
							"host": [
								"{{Path}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating_Product_with_negative_price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response_Time_below 800ms\" ,()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"pm.test(\"Product_invalid_Status_Code_400\", ()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"let resp=pm.response.json();// Response body object\r",
									"const msg = resp.error;//Storing error message from response body.\r",
									"pm.test(\"Invalid price value\", () => {\r",
									"    pm.expect(msg).to.eql(\"Invalid price value\"); // Check if response body contains \"Invalid price value\" message.\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":6,\r\n    \"name\":\"Iphone 15\",\r\n    \"description\":\"Nice phone\",\r\n    \"price\":-160000.00//Negative Value.\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/products",
							"host": [
								"{{Path}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating_Product_with_no_price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response_Time_below 800ms\" ,()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"pm.test(\"Product_Invalid_Status_Code_400\", ()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"let resp=pm.response.json();// Response body object\r",
									"const msg = resp.error;//Storing error message from response body.\r",
									"pm.test(\"Missing required fields\", () => {\r",
									"    pm.expect(msg).to.eql(\"Missing required fields\"); // Check if response body contains \"Missing required fields\" message.\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":6,\r\n    \"name\":\"Iphone 15\",\r\n    \"description\":\"Nice phone\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/products",
							"host": [
								"{{Path}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating_Product_with_no_Desc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response_Time_below 800ms\" ,()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"pm.test(\"Product_Invalid_Status_Code_400\", ()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"let resp=pm.response.json();// Response body object\r",
									"const msg = resp.error;//Storing error message from response body.\r",
									"pm.test(\"Missing required fields\", () => {\r",
									"    pm.expect(msg).to.eql(\"Missing required fields\"); // Check if response body contains \"Missing required fields\" message.\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":8,\r\n    \"name\":\"Iphone 15\",\r\n    \"price\":1600\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/products",
							"host": [
								"{{Path}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating_Product_with_no_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response_Time_below 800ms\" ,()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"pm.test(\"Product_Invalid_Status_Code_400\", ()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"let resp=pm.response.json();// Response body object\r",
									"const msg = resp.error;//Storing error message from response body.\r",
									"pm.test(\"Missing required fields\", () => {\r",
									"    pm.expect(msg).to.eql(\"Missing required fields\"); // Check if response body contains \"Missing required fields\" message.\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":8,\r\n    \"description\":\"Nice phone\",\r\n    \"price\":1600\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/products",
							"host": [
								"{{Path}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating_Product_with_Invalid_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response_Time_below 800ms\" ,()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"pm.test(\"Product_Invalid_Status_Code_400\", ()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"let resp=pm.response.json();// Response body object\r",
									"const msg = resp.error;//Storing error message from response body.\r",
									"pm.test(\"Invalid name format or length\", () => {\r",
									"    pm.expect(msg).to.eql(\"Invalid name format or length\"); // Check if response body contains \"Invalid name format or length\" message.\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":8,\r\n    \"name\":456,\r\n    \"description\":\"Nice phone\",\r\n    \"price\":1600\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/products",
							"host": [
								"{{Path}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating_Product_with_Invalid_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response_Time_below 800ms\" ,()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"pm.test(\"Product_Invalid_Status_Code_400\", ()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"let resp=pm.response.json();// Response body object\r",
									"const msg = resp.error;//Storing error message from response body.\r",
									"pm.test(\"Invalid name format or length\", () => {\r",
									"    pm.expect(msg).to.eql(\"Invalid name format or length\"); // Check if response body contains \"Invalid name format or length\" message.\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":8,\r\n    \"name\":\"mikeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\",\r\n    \"description\":\"Nice phone\",\r\n    \"price\":1600\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/products",
							"host": [
								"{{Path}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Updating_existing_product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response_Time_below 800ms\" ,()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"pm.test(\"Product_Created_Status_Code_201\", ()=>{\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"    // Header Validation.\r",
									"pm.test(\"Validate Content-Type header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Cache-Control header\", function () {\r",
									"    pm.response.to.have.header(\"Cache-Control\");\r",
									"    const headerValue = pm.response.headers.get(\"Cache-Control\");\r",
									"    pm.expect(headerValue).to.eql(\"public, max-age=0, must-revalidate\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"Iphone 15\",\r\n    \"description\":\"Nice phone : )\",\r\n    \"price\":160000\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/products/5",
							"host": [
								"{{Path}}"
							],
							"path": [
								"products",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Updating_Non-existing_product Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response_Time_below 800ms\" ,()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"pm.test(\"Product_Not_Created_Status_Code_404\", ()=>{\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"let resp=pm.response.json();// Response body object\r",
									"const msg = resp.error;//Storing error message from response body.\r",
									"pm.test(\"Product not found\", () => {\r",
									"    pm.expect(msg).to.eql(\"Product not found\"); // Check if response body contains \"Product not found\" message.\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"Iphone 10\",\r\n    \"description\":\"Very ! Nice phone : )\",\r\n    \"price\":\"1600\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/products/6",
							"host": [
								"{{Path}}"
							],
							"path": [
								"products",
								"6"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleting_Non-existing_product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response_Time_below 800ms\" ,()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"pm.test(\"Product_Not_Deleted_Status_Code_404\", ()=>{\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"let resp=pm.response.json();// Response body object\r",
									"const msg = resp.error;//Storing error message from response body.\r",
									"pm.test(\"Product not found\", () => {\r",
									"    pm.expect(msg).to.eql(\"Product not found\"); // Check if response body contains \"Product not found\" message.\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/products/6",
							"host": [
								"{{Path}}"
							],
							"path": [
								"products",
								"6"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleting_existing_product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response_Time_below 800ms\" ,()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"pm.test(\"Product_Deleted_Status_Code_200\", ()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{Path}}/products/5",
							"host": [
								"{{Path}}"
							],
							"path": [
								"products",
								"5"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Get_All_orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response_Time_below_800\" ,()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"pm.test(\"Status_Code_200\", ()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"    // Header Validation.\r",
									"pm.test(\"Validate Content-Type header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Cache-Control header\", function () {\r",
									"    pm.response.to.have.header(\"Cache-Control\");\r",
									"    const headerValue = pm.response.headers.get(\"Cache-Control\");\r",
									"    pm.expect(headerValue).to.eql(\"public, max-age=0, must-revalidate\");\r",
									"});\r",
									"// JSON Schema Validation.\r",
									"const schema={\r",
									"  \"type\": \"object\",\r",
									"  \"required\": [\"id\", \"quantity\", \"total\", \"user\", \"product\"],\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"quantity\": {\r",
									"      \"type\": \"integer\",\r",
									"      \"minimum\": 1\r",
									"    },\r",
									"    \"total\": {\r",
									"      \"type\": \"number\",\r",
									"      \"minimum\": 0\r",
									"    },\r",
									"    \"user\": {\r",
									"      \"type\": \"object\",\r",
									"      \"required\": [\"id\", \"name\", \"email\", \"age\"],\r",
									"      \"properties\": {\r",
									"        \"id\": { \"type\": \"integer\" },\r",
									"        \"name\": { \"type\": \"string\" },\r",
									"        \"email\": {\r",
									"          \"type\": \"string\",\r",
									"          \"format\": \"email\"\r",
									"        },\r",
									"        \"age\": {\r",
									"          \"type\": \"integer\",\r",
									"          \"minimum\": 0\r",
									"        }\r",
									"      }\r",
									"    },\r",
									"    \"product\": {\r",
									"      \"type\": \"object\",\r",
									"      \"required\": [\"id\", \"name\", \"description\", \"price\"],\r",
									"      \"properties\": {\r",
									"        \"id\": { \"type\": \"integer\" },\r",
									"        \"name\": { \"type\": \"string\" },\r",
									"        \"description\": { \"type\": \"string\" },\r",
									"        \"price\": {\r",
									"          \"type\": \"number\",\r",
									"          \"minimum\": 0\r",
									"        }\r",
									"      }\r",
									"    }\r",
									"  }\r",
									"};\r",
									"let resp=pm.response.json();\r",
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"const validate = ajv.compile(schema);\r",
									"const valid = validate(resp);\r",
									"\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    pm.expect(valid).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Path}}/orders",
							"host": [
								"{{Path}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": [
						{
							"name": "Get_All_orders",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Path}}/orders/2",
									"host": [
										"{{Path}}"
									],
									"path": [
										"orders",
										"2"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Age",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "public, max-age=0, must-revalidate"
								},
								{
									"key": "Content-Length",
									"value": "256"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 16 Apr 2025 06:10:47 GMT"
								},
								{
									"key": "Etag",
									"value": "W/\"100-WvjPnmL3UfIH0HO+pHgz+4kUo40\""
								},
								{
									"key": "Server",
									"value": "Vercel"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubDomains; preload"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "X-Vercel-Cache",
									"value": "MISS"
								},
								{
									"key": "X-Vercel-Id",
									"value": "bom1::iad1::8llbx-1744783847619-608cc476f1f3"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 2,\n    \"quantity\": 1,\n    \"total\": 99.99,\n    \"user\": {\n        \"id\": 3,\n        \"name\": \"Emily Davis\",\n        \"email\": \"emily.davis@example.com\",\n        \"age\": 41\n    },\n    \"product\": {\n        \"id\": 1,\n        \"name\": \"Wireless Headphones\",\n        \"description\": \"High-quality wireless headphones with noise-canceling feature.\",\n        \"price\": 99.99\n    }\n}"
						}
					]
				},
				{
					"name": "Get_Specific_orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response_Time\" ,()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status_Code\", ()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/orders/2",
							"host": [
								"{{Path}}"
							],
							"path": [
								"orders",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get_non-existing_orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response_Time\" ,()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status_Code_404\", ()=>{\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"let resp=pm.response.json();// Response body object\r",
									"const msg = resp.error;//Storing error message from response body.\r",
									"pm.test(\"Order not found\", () => {\r",
									"    pm.expect(msg).to.eql(\"Order not found\"); // Check if response body contains \"Order not found\" message.\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/orders/7",
							"host": [
								"{{Path}}"
							],
							"path": [
								"orders",
								"7"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating_order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response_Time_to_be_below 800\" ,()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"pm.test(\"Product_Created_Status_Code_201\", ()=>{\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"    // Header Validation.\r",
									"pm.test(\"Validate Content-Type header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Cache-Control header\", function () {\r",
									"    pm.response.to.have.header(\"Cache-Control\");\r",
									"    const headerValue = pm.response.headers.get(\"Cache-Control\");\r",
									"    pm.expect(headerValue).to.eql(\"public, max-age=0, must-revalidate\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\":4,\r\n    \"product_id\":3,\r\n    \"quantity\":3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/orders",
							"host": [
								"{{Path}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating_Invalid_order_by_user_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response_Time_to_be_below 800\" ,()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"pm.test(\"Order_not_Created_Status_Code_404\", ()=>{\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"let resp=pm.response.json();// Response body object\r",
									"const msg = resp.error;//Storing error message from response body.\r",
									"pm.test(\"Invalid user or product ID\", () => {\r",
									"    pm.expect(msg).to.eql(\"Invalid user or product ID\"); // Check if response body contains \"Invalid user or product ID\" message.\r",
									"});\r",
									"    // Header Validation.\r",
									"pm.test(\"Validate Content-Type header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Cache-Control header\", function () {\r",
									"    pm.response.to.have.header(\"Cache-Control\");\r",
									"    const headerValue = pm.response.headers.get(\"Cache-Control\");\r",
									"    pm.expect(headerValue).to.eql(\"public, max-age=0, must-revalidate\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\":6,\r\n    \"product_id\":3,\r\n    \"quantity\":3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/orders",
							"host": [
								"{{Path}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating_Invalid_order_by_Product_id Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response_Time_to_be_below 800\" ,()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"pm.test(\"Order_not_Created_Status_Code_404\", ()=>{\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"let resp=pm.response.json();// Response body object\r",
									"const msg = resp.error;//Storing error message from response body.\r",
									"pm.test(\"Invalid user or product ID\", () => {\r",
									"    pm.expect(msg).to.eql(\"Invalid user or product ID\"); // Check if response body contains \"Invalid user or product ID\" message.\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\":6,\r\n    \"product_id\":6,\r\n    \"quantity\":3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/orders",
							"host": [
								"{{Path}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating_Invalid_order_by_No_User_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response_Time_to_be_below 800\" ,()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"pm.test(\"Order_not_Created_Status_Code_400\", ()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"let resp=pm.response.json();// Response body object\r",
									"const msg = resp.error;//Storing error message from response body.\r",
									"pm.test(\"Missing required fields\", () => {\r",
									"    pm.expect(msg).to.eql(\"Missing required fields\"); // Check if response body contains \"Missing required fields\" message.\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product_id\":3,\r\n    \"quantity\":3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/orders",
							"host": [
								"{{Path}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating_Invalid_order_by_No_product_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response_Time_to_be_below 800\" ,()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"pm.test(\"Order_not_Created_Status_Code_400\", ()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"let resp=pm.response.json();// Response body object\r",
									"const msg = resp.error;//Storing error message from response body.\r",
									"pm.test(\"Missing required fields\", () => {\r",
									"    pm.expect(msg).to.eql(\"Missing required fields\"); // Check if response body contains \"Missing required fields\" message.\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\":3,\r\n    \"quantity\":3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/orders",
							"host": [
								"{{Path}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating_Invalid_order_by_Quantity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response_Time_to_be_below 800\" ,()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"pm.test(\"Order_not_Created_Status_Code_400\", ()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"let resp=pm.response.json();// Response body object\r",
									"const msg = resp.error;//Storing error message from response body.\r",
									"pm.test(\"Invalid quantity value\", () => {\r",
									"    pm.expect(msg).to.eql(\"Invalid quantity value\"); // Check if response body contains \"Invalid quantity value\" message.\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\":3,\r\n    \"product_id\":3,\r\n    \"quantity\":-1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/orders",
							"host": [
								"{{Path}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating_Invalid_order_by_Quantity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response_Time_to_be_below 800\" ,()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"pm.test(\"Order_not_Created_Status_Code_400\", ()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"let resp=pm.response.json();// Response body object\r",
									"const msg = resp.error;//Storing error message from response body.\r",
									"pm.test(\"Invalid quantity value\", () => {\r",
									"    pm.expect(msg).to.eql(\"Invalid quantity value\"); // Check if response body contains \"Invalid quantity value\" message.\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\":3,\r\n    \"product_id\":3,\r\n    \"quantity\":11\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/orders",
							"host": [
								"{{Path}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Updating_order_",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response_Time_to_be_below 800\" ,()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"pm.test(\"Order_Updated_Status_Code_200\", ()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\":3,\r\n    \"product_id\":5,\r\n    \"quantity\":4\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/orders/1",
							"host": [
								"{{Path}}"
							],
							"path": [
								"orders",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "Updating_order_",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user_id\":3,\r\n    \"product_id\":5,\r\n    \"quantity\":4\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Path}}/orders/1",
									"host": [
										"{{Path}}"
									],
									"path": [
										"orders",
										"1"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Cache-Control",
									"value": "public, max-age=0, must-revalidate"
								},
								{
									"key": "Content-Length",
									"value": "147"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'"
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 16 Apr 2025 06:12:26 GMT"
								},
								{
									"key": "Server",
									"value": "Vercel"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubDomains; preload"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "X-Vercel-Cache",
									"value": "MISS"
								},
								{
									"key": "X-Vercel-Id",
									"value": "bom1::iad1::csw9b-1744783946653-4644e1cca80c"
								}
							],
							"cookie": [],
							"body": "<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\">\n        <title>Error</title>\n    </head>\n    <body>\n        <pre>Cannot PUT /orders/1</pre>\n    </body>\n</html>"
						}
					]
				},
				{
					"name": "Updating_order_ Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response_Time_to_be_below 800\" ,()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"pm.test(\"Order_Updated_Status_Code_200\", ()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\":3,\r\n    \"product_id\":5,\r\n    \"quantity\":4\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Path}}/orders/7",
							"host": [
								"{{Path}}"
							],
							"path": [
								"orders",
								"7"
							]
						}
					},
					"response": [
						{
							"name": "Updating_order_",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user_id\":3,\r\n    \"product_id\":5,\r\n    \"quantity\":4\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Path}}/orders/1",
									"host": [
										"{{Path}}"
									],
									"path": [
										"orders",
										"1"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Cache-Control",
									"value": "public, max-age=0, must-revalidate"
								},
								{
									"key": "Content-Length",
									"value": "147"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'"
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 16 Apr 2025 06:12:26 GMT"
								},
								{
									"key": "Server",
									"value": "Vercel"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubDomains; preload"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "X-Vercel-Cache",
									"value": "MISS"
								},
								{
									"key": "X-Vercel-Id",
									"value": "bom1::iad1::csw9b-1744783946653-4644e1cca80c"
								}
							],
							"cookie": [],
							"body": "<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\">\n        <title>Error</title>\n    </head>\n    <body>\n        <pre>Cannot PUT /orders/1</pre>\n    </body>\n</html>"
						}
					]
				},
				{
					"name": "Deleting_orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response_Time_to_be_below 800\" ,()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"pm.test(\"Order_Deleted_Status_Code_200\", ()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{Path}}/orders/1",
							"host": [
								"{{Path}}"
							],
							"path": [
								"orders",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "Updating_order_",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user_id\":3,\r\n    \"product_id\":5,\r\n    \"quantity\":4\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Path}}/orders/1",
									"host": [
										"{{Path}}"
									],
									"path": [
										"orders",
										"1"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Cache-Control",
									"value": "public, max-age=0, must-revalidate"
								},
								{
									"key": "Content-Length",
									"value": "147"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'"
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 16 Apr 2025 06:12:26 GMT"
								},
								{
									"key": "Server",
									"value": "Vercel"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubDomains; preload"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "X-Vercel-Cache",
									"value": "MISS"
								},
								{
									"key": "X-Vercel-Id",
									"value": "bom1::iad1::csw9b-1744783946653-4644e1cca80c"
								}
							],
							"cookie": [],
							"body": "<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\">\n        <title>Error</title>\n    </head>\n    <body>\n        <pre>Cannot PUT /orders/1</pre>\n    </body>\n</html>"
						}
					]
				},
				{
					"name": "Deleting_Non_existing_orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response_Time_to_be_below 800\" ,()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"pm.test(\"Order_Not_Deleted_Status_Code_404\", ()=>{\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"let resp=pm.response.json();// Response body object\r",
									"const msg = resp.error;//Storing error message from response body.\r",
									"pm.test(\"Order not found\", () => {\r",
									"    pm.expect(msg).to.eql(\"Order not found\"); // Check if response body contains \"Order not found\" message.\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{Path}}/orders/8",
							"host": [
								"{{Path}}"
							],
							"path": [
								"orders",
								"8"
							]
						}
					},
					"response": [
						{
							"name": "Updating_order_",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user_id\":3,\r\n    \"product_id\":5,\r\n    \"quantity\":4\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Path}}/orders/1",
									"host": [
										"{{Path}}"
									],
									"path": [
										"orders",
										"1"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Cache-Control",
									"value": "public, max-age=0, must-revalidate"
								},
								{
									"key": "Content-Length",
									"value": "147"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'"
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 16 Apr 2025 06:12:26 GMT"
								},
								{
									"key": "Server",
									"value": "Vercel"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubDomains; preload"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "X-Vercel-Cache",
									"value": "MISS"
								},
								{
									"key": "X-Vercel-Id",
									"value": "bom1::iad1::csw9b-1744783946653-4644e1cca80c"
								}
							],
							"cookie": [],
							"body": "<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\">\n        <title>Error</title>\n    </head>\n    <body>\n        <pre>Cannot PUT /orders/1</pre>\n    </body>\n</html>"
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "Path",
			"value": "https://qa-testing-eight.vercel.app",
			"type": "string"
		},
		{
			"key": "Prod_schema",
			"value": ""
		}
	]
}